// --- Triangle SVG Generators ---

function generateTriangleSVG(instruction: string): string {
  const lower = instruction.toLowerCase();

  if (lower.includes("isosceles")) {
    return generateIsoscelesTriangleSVG(instruction);
  } else if (lower.includes("equilateral")) {
    return generateEquilateralTriangleSVG(instruction);
  } else if (lower.includes("similar") || lower.includes("congruent")) {
    return generateSimilarCongruentTrianglesSVG(instruction);
  } else if (lower.includes("angle sum") || lower.includes("interior angles")) {
    return generateTriangleAngleSumSVG(instruction);
  } else {
    return generateGenericTriangleSVG(instruction);
  }
}

function generateIsoscelesTriangleSVG(instruction: string): string {
  return `
    <svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
      <polygon points="200,50 120,200 280,200" class="shape"/>
      <text x="200" y="40" class="label" text-anchor="middle">A</text>
      <text x="110" y="210" class="label">B</text>
      <text x="290" y="210" class="label">C</text>
      <text x="140" y="180" class="label">AB = AC</text>
      <text x="50" y="20" class="label">${instruction}</text>
    </svg>`;
}

function generateEquilateralTriangleSVG(instruction: string): string {
  return `
    <svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
      <polygon points="200,50 100,220 300,220" class="shape"/>
      <text x="200" y="40" class="label" text-anchor="middle">A</text>
      <text x="90" y="230" class="label">B</text>
      <text x="310" y="230" class="label">C</text>
      <text x="50" y="20" class="label">${instruction}</text>
    </svg>`;
}

function generateSimilarCongruentTrianglesSVG(instruction: string): string {
  return `
    <svg width="500" height="300" xmlns="http://www.w3.org/2000/svg">
      <polygon points="100,200 150,100 200,200" class="shape"/>
      <polygon points="300,200 350,120 400,200" class="shape"/>
      <text x="150" y="95" class="label">A</text>
      <text x="95" y="210" class="label">B</text>
      <text x="205" y="210" class="label">C</text>
      <text x="350" y="115" class="label">D</text>
      <text x="295" y="210" class="label">E</text>
      <text x="405" y="210" class="label">F</text>
      <text x="50" y="20" class="label">${instruction}</text>
    </svg>`;
}

function generateTriangleAngleSumSVG(instruction: string): string {
  return `
    <svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
      <polygon points="200,50 100,220 300,220" class="shape"/>
      <text x="200" y="40" class="label">A</text>
      <text x="90" y="230" class="label">B</text>
      <text x="310" y="230" class="label">C</text>
      <text x="140" y="180" class="label">∠A + ∠B + ∠C = 180°</text>
      <text x="50" y="20" class="label">${instruction}</text>
    </svg>`;
}

function generateGenericTriangleSVG(instruction: string): string {
  return generateTriangleAngleSumSVG(instruction);
}

// --- Coordinate Geometry ---

function generateCoordinateGeometrySVG(instruction: string): string {
  return `
    <svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
      <line x1="200" y1="0" x2="200" y2="300" stroke="#d1d5db" stroke-width="1"/>
      <line x1="0" y1="150" x2="400" y2="150" stroke="#d1d5db" stroke-width="1"/>
      <circle cx="250" cy="100" r="4" fill="#2563eb" />
      <text x="255" y="95" class="label">A(5, 2)</text>
      <circle cx="150" cy="200" r="4" fill="#2563eb" />
      <text x="155" y="195" class="label">B(-1, -3)</text>
      <line x1="250" y1="100" x2="150" y2="200" class="shape"/>
      <text x="50" y="20" class="label">${instruction}</text>
    </svg>`;
}

// --- Construction ---

function generateConstructionSVG(instruction: string): string {
  if (instruction.toLowerCase().includes("bisect")) {
    return generateBisectorSVG(instruction);
  } else if (instruction.toLowerCase().includes("tangent")) {
    return generateTangentToCircleSVG(instruction);
  } else {
    return generateGenericConstructionSVG(instruction);
  }
}

function generateBisectorSVG(instruction: string): string {
  return `
    <svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
      <line x1="100" y1="250" x2="300" y2="250" class="shape" />
      <line x1="200" y1="50" x2="200" y2="250" class="shape" stroke-dasharray="5,5"/>
      <text x="50" y="20" class="label">${instruction}</text>
      <text x="190" y="40" class="label">Bisector</text>
    </svg>`;
}

function generateTangentToCircleSVG(instruction: string): string {
  return `
    <svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
      <circle cx="200" cy="150" r="80" class="shape"/>
      <line x1="120" y1="70" x2="280" y2="70" class="shape"/>
      <text x="200" y="150" class="label" text-anchor="middle">O</text>
      <text x="50" y="20" class="label">${instruction}</text>
    </svg>`;
}

function generateGenericConstructionSVG(instruction: string): string {
  return `
    <svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
      <line x1="100" y1="100" x2="300" y2="200" class="shape"/>
      <text x="50" y="20" class="label">${instruction}</text>
    </svg>`;
}
